#!/usr/bin/env python3

__author__ = 'Dmitri Popov'
__copyright__ = 'Copyleft 2017, Dmitri Popov'
__credits__ = ['Thomas Schraitle']
__license__ = 'GPLv3'
__version__ = '1.1.1'
__maintainer__ = 'Dmitri Popov'
__email__ = 'dpopov@suse.com'
__URL__ = 'https://github.com/dmpop/sonnenhut'
__status__ = 'Development'

from astral import SUN_SETTING, SUN_RISING, Astral, AstralError, GoogleGeocoder
import datetime, sys, os.path, pyowm
from bottle import route, redirect, run, debug


def getlocation(city):
    """
    Return the geographical coordinates for the specified city
    Throws AstralError if unable to locate the city.

    :param str city: The name of the desired city
    :return: geographical coordinates
    :rtype: :class:`astral.Location`
    """
    return Astral(GoogleGeocoder)[city]


def initowm(apikey = 'f2871760abe7535464065759cf85bd3c'):
    """
    Initialize OpenWeatherMap service

    :param str apikey: API key for the OWM service
    :return:
    :rtype:
    """
    return pyowm.OWM(apikey)


def goldenhour(location, direction):
    """
    Return golden hour of sunset and sunrise depending on the direction

    :param location: location of the specified city
    :type location: :class:`astral.Location`
    :param direction: sun direction (up=sunrise, down=sunset)
    :type direction: int
    :return: tuple of start and end datetimes
    :rtype: tuple
    """
    return location.golden_hour(direction=direction, date=None, local=True)
    

def getweather(owm, location):
    """
    Get weather data for the given location

    :param owm: OpenWeatherMap API
    :type owm: :class:`pyowm.webapi25.owm25.OWM25`
    :param location: location of the specified city
    :type location: :class:`astral.Location`
    :return: weather data dictionary
    :rtype: dict
    """
    weatherdict = {}
    weather = owm.weather_at_coords(location.latitude, location.longitude)
    w = weather.get_weather()
    weatherdict['status'] = w.get_status()
    weatherdict['icon'] = w.get_weather_icon_name()
    weatherdict['wind_speed'] = w.get_wind().get('speed', 'N/A')
    weatherdict['temp'] = w.get_temperature('celsius').get('temp', 'N/A')
    weatherdict['humidity'] = w.get_humidity()
    return weatherdict


def forecast(owm, location):
    """
    Get weather forecast, return rain and snow status

    :param owm: OpenWeatherMap API
    :type owm: :class:`pyowm.webapi25.owm25.OWM25`
    :param location: location of the specified city
    :type location: :class:`astral.Location`
    :return: tuple with Boolean rain and snow
    :rtype: tuple
    """
    forecast = owm.daily_forecast_at_coords(location.latitude, location.longitude, limit=None)
    next_3_hours = pyowm.utils.timeutils.next_three_hours(date=None)
    rain = forecast.will_be_rainy_at(next_3_hours)
    snow = forecast.will_be_snowy_at(next_3_hours)
    return rain, snow


@route('/sonnenhut')
def sonnenhut():
    txt_path = 'sonnenhut.txt'

    location = getlocation(city)
    owm = initowm()

    gh_sunrise = goldenhour(location, direction=SUN_RISING)
    gh_sunset = goldenhour(location, direction=SUN_SETTING)

    general_info = ('\u2609 %s %s %.02f,%.02f' % (location.name,
                                                   location.timezone,
                                                   location.latitude,
                                                   location.longitude))
    gh_sunrise_line = ('\u263C \u2197    '
                       '{hh:02d}:{mm:02d}:{ss:02d} \u231a {duration} ').format(hh=gh_sunrise[0].hour,
                                                                               mm=gh_sunrise[0].minute,
                                                                               ss=gh_sunrise[0].second,
                                                                               duration=gh_sunrise[1]-gh_sunrise[0])
    gh_sunset_line = ('\u263C \u2198    '
                      '{hh:02d}:{mm:02d}:{ss:02d} \u231a {duration}    ').format(hh=gh_sunset[0].hour,
                                                                                 mm=gh_sunset[0].minute,
                                                                                 ss=gh_sunset[0].second,
                                                                                 duration=gh_sunset[1]-gh_sunset[0])

    weather = getweather(owm, location)
    
    rain, snow = forecast(owm, location)
    if rain == True or snow == True:
        precip = '\u2614'
    else:
        precip = '\u2713'

    if os.path.isfile(txt_path):
        txt_note = open(txt_path,'r')
        txt_note_print =(txt_note.read())
        txt_note.close()
    else:
        open(txt_path, 'a').close()

    return ('<meta name="viewport" content="width=device-width">'
            '<h1 style="letter-spacing: 5px; color: #ffcc00">Sonnenhut</h1>'
            '{}<br />'
            '<hr align=left width=250px>'
            '{}<br />'
            '{}<br />'
            '<hr align=left width=250px> '
            '{}, {}Â°C, {}m/s, {}% {}<br />'
            '<hr align=left width=250px> {}').format(general_info,
                                                     gh_sunrise_line,
                                                     gh_sunset_line,
                                                     weather['status'],
                                                     weather['temp'],
                                                     weather['wind_speed'],
                                                     weather['humidity'],
                                                     precip,
                                                     txt_note_print)


if __name__=='__main__':
    if len(sys.argv) > 1:
        city = sys.argv[1]
    else:
        print ('\u26a0 Looks like you forgot to specify a city.', file=sys.stderr)
        sys.exit(10)
    try:
        run(host='0.0.0.0', port=8080, reloader=True)
    except AstralError as error:
        print('\u26a0 Failed to obtain geographical coordinates of the specified city: %s' % error,
              file=sys.stderr)

